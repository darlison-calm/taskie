(()=>{"use strict";var __webpack_modules__={256:()=>{eval("\n;// CONCATENATED MODULE: ./src/utils/pubsub.js\nclass pubsub_PubSub {\r\n  constructor() {\r\n    this.events = {}\r\n  }\r\n\r\n  subscribe(evName, fn) {\r\n    this.events[evName] = this.events[evName] || []\r\n    this.events[evName].push(fn)\r\n  }\r\n\r\n  unsubscribe(evName, fn) {\r\n    if (this.events[evName]) {\r\n        this.events[evName] = this.events[evName].filter(f => f !== fn)\r\n    }\r\n  }\r\n\r\n  publish(evName, data) {\r\n    if (this.events[evName]) {\r\n      this.events[evName].forEach(f => f(data))\r\n    }\r\n  }\r\n}\r\n\r\n/* harmony default export */ const pubsub = (new pubsub_PubSub());\n;// CONCATENATED MODULE: ./src/utils/constants.js\nconst constants_EVENTS = {\r\n  PROJECT_ADDED: 'A project was added',\r\n  PROJECT_LIST_UPDATE: 'Project list update',\r\n  TASK_ADDED : 'A task was added'\r\n}\n;// CONCATENATED MODULE: ./src/project-form.js\n\r\n\r\nconst projectForm = {\r\n\r\n  setupAddProjectEventListener() {\r\n    const projectModal = document.getElementById('project-dialog')\r\n    const addProjectBtn = document.getElementById('add-project')\r\n    const form = document.getElementById('project-form')\r\n    \r\n    addProjectBtn.addEventListener('click' , () => projectModal.showModal())\r\n    \r\n    form.querySelector('#cancel').addEventListener('click', () => projectModal.close())\r\n    form.querySelector('#confirm').addEventListener('click', (ev) => {\r\n      ev.preventDefault()\r\n      projectForm.add()\r\n      projectModal.close()\r\n    })\r\n  },\r\n\r\n  add() {\r\n    let input = document.querySelector('#project-name')\r\n    let title = input.value\r\n    input.value = ''\r\n\r\n    pubsub.publish(constants_EVENTS.PROJECT_ADDED, title)\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/utils/addDomElement.js\nfunction addDomElement({tag, textContent = '', className = '', attr = {}}) {\r\n  \r\n  const element = document.createElement(tag);\r\n\r\n  if (className) {\r\n    element.classList.add(className);\r\n  }\r\n  if (textContent) {\r\n    element.textContent = textContent;\r\n  }\r\n  if (attr) {\r\n    for (const [key, value] of Object.entries(attr)) {\r\n      element.setAttribute(key, value);\r\n    }\r\n  }\r\n  return element;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/UI.js\n\r\n\r\nfunction displayProjectList(projects) {\r\n  const projectsContainer = document.getElementById(\"projects-container\");\r\n  projectsContainer.innerHTML = ''\r\n\r\n  projects.forEach(pro => {\r\n    let projectItem = addDomElement({\r\n      tag: 'button',\r\n      textContent: pro,\r\n      className: 'btn-projects',\r\n      attr: {\r\n        'data-index': `${pro} Project`\r\n      }\r\n    });\r\n\r\n    projectsContainer.append(projectItem);\r\n  });\r\n\r\n}\n;// CONCATENATED MODULE: ./src/project.js\n\r\n\r\n\r\n\r\nconst projectsManager = (function() {\r\n  const projects = []\r\n\r\n  const addProject = (project) => {\r\n    //TO DO\r\n    //CHECK IF A PROJECT WAS ALREADY ADDD    \r\n    projects.push(project)\r\n    pubsub.publish(constants_EVENTS.PROJECT_LIST_UPDATE , projectsManager.getProjects())\r\n  }\r\n  \r\n  const deleteProject = (index) => projects.splice(index, 1)\r\n\r\n  const getProjects = () => projects\r\n\r\n  return {\r\n    addProject,\r\n    deleteProject,\r\n    getProjects\r\n  }\r\n})()\r\n\r\nfunction subscribeToProjectEvents(){\r\n  pubsub.subscribe(constants_EVENTS.PROJECT_ADDED, projectsManager.addProject)\r\n  pubsub.subscribe(constants_EVENTS.PROJECT_LIST_UPDATE, displayProjectList)\r\n}\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./src/task-factory.js\n\r\n\r\n\r\nconst taskManager = (function() {\r\n  const tasksList = []\r\n\r\n  const addTask = (task) => {\r\n    tasksList.push(task);\r\n    console.log(taskManager.getTasks());\r\n  }\r\n\r\n  const getTasks = () => {\r\n    return tasksList\r\n  }\r\n\r\n  return {\r\n    addTask,\r\n    getTasks\r\n  }\r\n\r\n})()\r\n\r\nclass Task {\r\n  static todoIds = 0\r\n  \r\n  constructor(title, dueDate, priority, description, complete) {\r\n    this._title = title;\r\n    this._dueDate = dueDate;\r\n    this._priority = priority;\r\n    this._description = description;\r\n    this._complete = complete;\r\n    this._projectId = ''\r\n    this._id;\r\n    this.giveId()\r\n  }\r\n \r\n  giveId(){\r\n    this._id = Task.todoIds++\r\n  }\r\n\r\n  get title() {\r\n    return this._title;\r\n  }\r\n\r\n  set title(value) {\r\n    this._title = value;\r\n  }\r\n\r\n  get dueDate() {\r\n    return this._dueDate;\r\n  }\r\n\r\n  set dueDate(value) {\r\n    this._dueDate = value;\r\n  }\r\n\r\n  get priority() {\r\n    return this._priority;\r\n  }\r\n\r\n  set priority(value) {\r\n    this._priority = value;\r\n  }\r\n\r\n  get description() {\r\n    return this._description;\r\n  }\r\n\r\n  set description(value) {\r\n    this._description = value;\r\n  }\r\n\r\n  get complete() {\r\n    return this._complete;\r\n  }\r\n\r\n  togleComplete() {\r\n    this._complete = !this._complete\r\n  }\r\n\r\n  get projectId() {\r\n    return this._projectId = value\r\n  }\r\n\r\n  set projectId(value) {\r\n    this._projectId = value\r\n  }\r\n}\r\n\r\n//TODO\r\n//DISPLAY TASK\r\n\r\nfunction subscribeToTaskEvents(){\r\n  PubSub.subscribe(EVENTS.TASK_ADDED, taskManager.addTask)\r\n}\r\n\r\n\n;// CONCATENATED MODULE: ./src/task-form.js\n\r\n\r\n\r\nconst taskForm = {\r\n  \r\n  setupAddTaskEventListener() {\r\n    const taskModal = document.getElementById('task-dialog')\r\n    const addTaskBtn = document.getElementById('add-task') \r\n    const form = document.getElementById('task-form')\r\n    console.log(taskModal, addTaskBtn, form); \r\n    \r\n    addTaskBtn.addEventListener('click', () => taskModal.showModal())\r\n\r\n    form.querySelector('#cancel-new-task').addEventListener('click', () => taskModal.close())\r\n    form.querySelector('#confirm-new-task').addEventListener('click', (e) => {\r\n      e.preventDefault()\r\n      taskForm.add()\r\n      taskModal.close()\r\n    })\r\n  },\r\n\r\n  add() {\r\n    let title = document.querySelector('#task-title').value\r\n    let description = document.querySelector('#task-description').value\r\n    let date = document.querySelector('#task-date').value\r\n    let priority = document.querySelector('#task-priority').value\r\n\r\n    const task = new Task(title, description, date, priority)\r\n    pubsub.publish(constants_EVENTS.TASK_ADDED, task)\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n\r\n\r\n//TODO: \r\nprojectForm.setupAddProjectEventListener();\r\nsubscribeToProjectEvents();\r\ntaskForm.setupAddTaskEventListener();\r\n\r\n\r\n\r\n//document.addEventListener('click', e => {\r\n  //console.log(e.target)\r\n//})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const todos = []\r\n/* function addTodoItem(title, dueDate = '', priority = '', description = '', complete = false) {\r\n  const todoItem = new TodoFactory(title, dueDate, priority, description, complete)\r\n  todos.push(todoItem)\r\n  PubSub.publish('todoAdded', todoItem)\r\n}\r\n\r\nfunction addTodoToProject(todo, project) {\r\n  const projects = projectsManager.getProjects()\r\n  const projectExist = projects.some((e) => e === project)\r\n  if(!projectExist){\r\n    console.log(\"Project does not exist\")\r\n    return\r\n  }\r\n  todo.projectId = project\r\n} */\r\n\r\n/* addTodoItem('casa')\r\naddTodoItem('ferro') */\r\n\r\n\r\n\r\n\r\n\r\n//Create function that add the project's id to task projectId property\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///256\n")}},__webpack_exports__={};__webpack_modules__[256]()})();